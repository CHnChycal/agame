#pragma once

#include"monsters.h"
#include"monsterbag.h"

Monster::Monster(const Monster &tmp)
{
	Mname = tmp.Mname;
	id = tmp.id;
	Mnature = tmp.Mnature;
	isAlive = tmp.isAlive;
	hasCaught = tmp.hasCaught;
	BasAttack = tmp.BasAttack;
	BasDefense = tmp.BasDefense;
	BasValue = tmp.BasValue;
	BasSpeed = tmp.BasSpeed;
	MaxValue = tmp.MaxValue;
	CurValue = tmp.CurValue;
	Attack = tmp.Attack;
	Defense = tmp.Defense;
	Speed = tmp.Speed;
	MaxLevel = tmp.MaxLevel;
	CurLevel = tmp.CurLevel;
	MaxExper = tmp.MaxExper;
	CurExper = tmp.CurExper;
	Experience = tmp.Experience;
	AcuPercentage = tmp.AcuPercentage;

}
Monster::Monster(int num,int level) 
{
	switch (num) 
	{
	case 0: //²Ý
	{
		Mname = "ÃîÍÜÖÖ×Ó";
		Mnature = 4;
		id = 0;
		BasValue = 65;
		BasAttack = 49;
		BasDefense = 24;
		BasSpeed = 45;
		break;
	}
	case 1: //»ð
	{
		Mname = "Ð¡»ðÁú";
		Mnature = 1;
		id = 1;
		BasValue = 59;
		BasAttack = 52;
		BasDefense = 27;
		BasSpeed = 65;
		break;
	}
	case 2://Ë®
	{
		Mname = "½ÜÄá¹ê";
		Mnature = 2;
		id = 2;
		BasValue = 64;
		BasAttack = 48;
		BasDefense = 28;
		BasSpeed = 43;
		break;
	}
	case 3://³æ
	{
		Mname = "ÂÌÃ«³æ";
		Mnature = 8;
		id = 3;
		BasValue = 55;
		BasAttack = 45;
		BasDefense = 20;
		BasSpeed = 45;
		break;
	}
	case 4://¶¾
	{
		Mname = "°¢°ØÉß";
		Mnature = 7;
		id = 4;
		BasValue = 45;
		BasAttack = 50;
		BasDefense = 23;
		BasSpeed = 55;
		break;
	}
	case 5://µç
	{
		Mname = "Æ¤¿¨Çð";
		Mnature = 3;
		id = 5;
		BasValue = 63;
		BasAttack = 70;
		BasDefense = 38;
		BasSpeed = 90;
		break;
	}
	case 6://ÑÒÊ¯
	{
		Mname = "´©É½Êó";
		Mnature = 9;
		id = 6;
		BasValue = 58;
		BasAttack = 48;
		BasDefense = 35;
		BasSpeed = 40;
		break;
	}
	case 7://·ÉÐÐ
	{
		Mname = "Æ¤Æ¤";
		Mnature = 6;
		id = 7;
		BasValue = 50;
		BasAttack = 40;
		BasDefense = 22;
		BasSpeed = 44;
		break;
	}
	case 8://Ò»°ã
	{
		Mname = "ÅÖ¶¡";
		Mnature = 0;
		id = 8;
		BasValue = 60;
		BasAttack = 38;
		BasDefense = 33;
		BasSpeed = 38;
		break;
	}
	case 9://·ÉÐÐ
	{
		Mname = "³¬Òôòð";
		Mnature = 6;
		id = 9;
		BasValue = 56;
		BasAttack = 51;
		BasDefense = 20;
		BasSpeed = 49;
		break;
	}
	case 10://²Ý
	{
		Mname = "×ßÂ·²Ý";
		Mnature = 4;
		id = 10;
		BasValue = 52;
		BasAttack = 38;
		BasDefense = 26;
		BasSpeed = 40;
		break;
	}
	case 11://ÑÒÊ¯
	{
		Mname = "µØÊó";
		Mnature = 9;
		id = 11;
		BasValue = 44;
		BasAttack = 42;
		BasDefense = 25;
		BasSpeed = 78;
		break;
	}
	case 12://Ò»°ã
	{
		Mname = "ß÷ß÷";
		Mnature = 6;
		id = 12;
		BasValue = 46;
		BasAttack = 51;
		BasDefense = 21;
		BasSpeed = 62;
		break;
	}
	case 13://Ë®
	{
		Mname = "¿É´ïÑ¼";
		Mnature = 2;
		id = 13;
		BasValue = 53;
		BasAttack = 39;
		BasDefense = 26;
		BasSpeed = 39;
		break;
	}
	case 14://ÑÒÊ¯
	{
		Mname = "¿¨µÙ¹·";
		Mnature = 9;
		id = 14;
		BasValue = 50;
		BasAttack = 46;
		BasDefense = 24;
		BasSpeed = 40;
		break;
	}
	case 15://Ë®
	{
		Mname = "ÎÃÏãòòò½";
		Mnature = 2;
		id = 15;
		BasValue = 39;
		BasAttack = 36;
		BasDefense = 26;
		BasSpeed = 40;
		break;
	}
	case 16://²Ý
	{
		Mname = "À®°ÈÑ¿";
		Mnature = 4;
		id = 16;
		BasValue = 52;
		BasAttack = 34;
		BasDefense = 23;
		BasSpeed = 36;
		break;
	}
	case 17://¶¾
	{
		Mname = "¶¾´ÌË®Ä¸";
		Mnature = 7;
		id = 17;
		BasValue = 46;
		BasAttack = 48;
		BasDefense = 26;
		BasSpeed = 37;
		break;
	}
	case 18://»ð
	{
		Mname = "Ð¡»ðÂí";
		Mnature = 1;
		id = 18;
		BasValue = 50;
		BasAttack = 52;
		BasDefense = 27;
		BasSpeed = 53;
		break;
	}
	case 19://Ë®
	{
		Mname = "´ô´ôÊÞ";
		Mnature = 2;
		id = 19;
		BasValue = 64;
		BasAttack = 54;
		BasDefense = 28;
		BasSpeed = 30;
		break;
	}
	case 20://¶¾
	{
		Mname = "³ô³ôÄà";
		Mnature = 7;
		id = 20;
		BasValue = 68;
		BasAttack = 36;
		BasDefense = 33;
		BasSpeed = 28;
		break;
	}
	case 21://Ë®
	{
		Mname = "Ð¡º£Ê¨";
		Mnature = 2;
		id = 21;
		BasValue = 54;
		BasAttack = 47;
		BasDefense = 30;
		BasSpeed = 44;
		break;
	}
	case 22://ÑÒÊ¯
	{
		Mname = "´óÑÒÉß";
		Mnature = 9;
		id = 22;
		BasValue = 72;
		BasAttack = 56;
		BasDefense = 29;
		BasSpeed = 60;
		break;
	}
	case 23://µç
	{
		Mname = "À×µçÇò";
		Mnature = 3;
		id = 23;
		BasValue = 52;
		BasAttack = 47;
		BasDefense = 23;
		BasSpeed = 66;
		break;
	}
	case 24://Ë®
	{
		Mname = "±¦Ê¯º£ÐÇ";
		Mnature = 2;
		id = 24;
		BasValue = 65;
		BasAttack = 41;
		BasDefense = 35;
		BasSpeed = 39;
		break;
	}
	case 25://±ù
	{
		Mname = "¼±¶³Äñ";
		Mnature = 5;
		id = 25;
		BasValue = 54;
		BasAttack = 52;
		BasDefense = 25;
		BasSpeed = 66;
		break;
	}
	case 26://»ð
	{
		Mname = "»ðÑæÄñ";
		Mnature = 1;
		id = 26;
		BasValue = 54;
		BasAttack = 52;
		BasDefense = 26;
		BasSpeed = 66;
		break;
	}
	case 27://µç
	{
		Mname = "ÉÁµçÄñ";
		Mnature = 3;
		id = 27;
		BasValue = 54;
		BasAttack = 52;
		BasDefense = 26;
		BasSpeed = 66;
		break;
	}
	case 28://²Ý
	{
		Mname = "ÔÂ¹ðÒ¶";
		Mnature = 4;
		id = 28;
		BasValue = 60;
		BasAttack = 41;
		BasDefense = 29;
		BasSpeed = 45;
		break;
	}
	case 29://»ð
	{
		Mname = "»ðÒÁ²¼";
		Mnature = 1;
		id = 29;
		BasValue = 65;
		BasAttack = 55;
		BasDefense = 30;
		BasSpeed = 55;
		break;
	}
	case 30://Ë®
	{
		Mname = "Ë®ÒÁ²¼";
		Mnature = 2;
		id = 30;
		BasValue = 65;
		BasAttack = 55;
		BasDefense = 20;
		BasSpeed = 55;
		break;
	}
	case 31://µç
	{
		Mname = "À×ÒÁ²¼";
		Mnature = 3;
		id = 31;
		BasValue = 65;
		BasAttack = 55;
		BasDefense = 30;
		BasSpeed = 55;
		break;
	}
	case 32://Ò»°ã
	{
		Mname = "È¦È¦ÐÜ";
		Mnature = 0;
		id = 32;
		BasValue = 60;
		BasAttack = 50;
		BasDefense = 31;
		BasSpeed = 37;
		break;
	}
	case 33://»ð
	{
		Mname = "ÈÛÑÒ³æ";
		Mnature = 1;
		id = 33;
		BasValue = 48;
		BasAttack = 62;
		BasDefense = 27;
		BasSpeed = 39;
		break;
	}
	case 34://¶¾
	{
		Mname = "¶¾·Ûµû";
		Mnature = 7;
		id = 34;
		BasValue = 46;
		BasAttack = 61;
		BasDefense = 28;
		BasSpeed = 53;
		break;
	}
	case 35://·ÉÐÐ
	{
		Mname = "³¤³áÅ¸";
		Mnature = 6;
		id = 35;
		BasValue = 52;
		BasAttack = 47;
		BasDefense = 26;
		BasSpeed = 67;
		break;
	}
	case 36://Ò»°ã
	{
		Mname = "ÓÅÑÅÃ¨";
		Mnature = 0;
		id = 36;
		BasValue = 56;
		BasAttack = 52;
		BasDefense = 29;
		BasSpeed = 60;
		break;
	}
	case 37://µç
	{
		Mname = "ÕýµçÅÄÅÄ";
		Mnature = 3;
		id = 37;
		BasValue = 60;
		BasAttack = 50;
		BasDefense = 25;
		BasSpeed = 50;
		break;
	}
	case 38://µç
	{
		Mname = "¸ºµçÅÄÅÄ";
		Mnature = 3;
		id = 38;
		BasValue = 60;
		BasAttack = 40;
		BasDefense = 35;
		BasSpeed = 50;
		break;
	}
	case 39://Ë®
	{
		Mname = "¾ÞÑÀöè";
		Mnature = 2;
		id = 39;
		BasValue = 64;
		BasAttack = 65;
		BasDefense = 22;
		BasSpeed = 60;
		break;
	}
	case 40://¶¾
	{
		Mname = "ÈÜÊ³ÊÞ";
		Mnature = 7;
		id = 40;
		BasValue = 55;
		BasAttack = 55;
		BasDefense = 35;
		BasSpeed = 55;
		break;
	}
	case 41://»ð
	{
		Mname = "Åç»ðÍÕ";
		Mnature = 1;
		id = 41;
		BasValue = 68;
		BasAttack = 60;
		BasDefense = 30;
		BasSpeed = 40;
		break;
	}
	case 42://·ÉÐÐ
	{
		Mname = "ÆßÏ¦ÇàÄñ";
		Mnature = 6;
		id = 42;
		BasValue = 55;
		BasAttack = 50;
		BasDefense = 40;
		BasSpeed = 60;
		break;
	}
	case 43://ÑÒÊ¯
	{
		Mname = "ÔÂÊ¯";
		Mnature = 9;
		id = 43;
		BasValue = 60;
		BasAttack = 50;
		BasDefense = 35;
		BasSpeed = 80;
		break;
	}
	case 44://ÑÒÊ¯
	{
		Mname = "Ì«ÑôÑÒ";
		Mnature = 9;
		id = 44;
		BasValue = 60;
		BasAttack = 65;
		BasDefense = 38;
		BasSpeed = 50;
		break;
	}
	case 45://·ÉÐÐ
	{
		Mname = "É³Ä®òßòÑ";
		Mnature = 6;
		id = 45;
		BasValue = 57;
		BasAttack = 47;
		BasDefense = 29;
		BasSpeed = 72;
		break;
	}
	case 46://±ù
	{
		Mname = "Ñ©Í¯×Ó";
		Mnature = 5;
		id = 46;
		BasValue = 59;
		BasAttack = 49;
		BasDefense = 20;
		BasSpeed = 44;
		break;
	}
	case 47://±ù
	{
		Mname = "º£±ªÇò";
		Mnature = 5;
		id = 47;
		BasValue = 65;
		BasAttack = 48;
		BasDefense = 22;
		BasSpeed = 38;
		break;
	}
	case 48://³æ
	{
		Mname = "ÈýÃÛ·ä";
		Mnature = 8;
		id = 48;
		BasValue = 60;
		BasAttack = 53;
		BasDefense = 26;
		BasSpeed = 66;
		break;
	}
	case 49://³æ
	{
		Mname = "°Ù×ãòÚò¼";
		Mnature = 8;
		id = 49;
		BasValue = 58;
		BasAttack = 52;
		BasDefense = 27;
		BasSpeed = 70;
		break;
	}
	}
	CurLevel = level;
	MaxValue = CurLevel * 5 + BasValue;
	Attack = CurLevel * 3 + BasAttack;
	Defense = CurLevel * 2 + BasDefense;
	Speed = CurLevel + BasSpeed;
	
	isAlive = true;
	hasCaught = false;

	MaxLevel = 80;
	CurValue = MaxValue;
	MaxExper = CurLevel * 20 + 80;
	CurExper = 0;

	Experience = CurLevel * 10;
	AcuPercentage = 0;
}

void Monster::SetExper(int curexper)
{
	this->CurExper = curexper;
}

void Monster::SetValue(int curvalue)
{
	this->CurValue = curvalue;
}
void Monster::Recover()
{
	this->isAlive = true;
	this->CurValue = MaxValue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Õ½¶·Ò³Ãæ
void Monster::Fight(Monster* enemy)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	
	system("cls");
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
	cout << "//////////////////////////////////////////////////////////" << endl;
	cout << this->Mname << "(lv." << this->CurLevel << ")" << "(" << this->Mnature << ")" << "Óë" << enemy->Mname << "lv.(" << enemy->CurLevel << ")" << "lv.(" << enemy->Mnature << ")"<<"¿ªÊ¼ÁËÕ½¶·£¡" << endl;
	cout << "//////////////////////////////////////////////////////////" << endl;
	system("pause");
	int n;
	int turn = 1;

	while(this->isAlive && enemy->isAlive && !enemy->hasCaught)//µ±Ë«·½¶¼Î´ËÀÍöÊ±Ñ¡Ôñ²Ù×÷
	{
		system("cls");
		SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
		cout << "//////////////////////////////////////////////////////////" << endl;
		cout << "µ±Ç°ÎªµÚ" << turn << "»ØºÏ" << endl;
		cout << "µ±Ç°" << this->Mname << "µÄ×´Ì¬Îª: " << this->CurValue << " / " << this->MaxValue << endl;
		cout << enemy->Mname << "µÄ×´Ì¬Îª: " << enemy->CurValue << " / " << enemy->MaxValue << endl;
		cout << "//////////////////////////////////////////////////////////" << endl;
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
		cout << "ÇëÑ¡ÔñÄãµÄ²Ù×÷£º" << endl;
		cout << "1: ¹¥»÷" << endl;
		cout << "2: ·ÀÓù" << endl;
		cout << "3: »Ø¸´µÀ¾ß" << endl;
		cout << "4: ²¶×½µÀ¾ß" << endl;
		cout << "5: ¸ü»»±¦¿ÉÃÎ" << endl;
		cout << "0: ÌÓÅÜ" << endl;//·µ»Ø³¡¾°****************************************************************************
		while (true)
		{
			cout << ":";
			cin >> n;
			if (cin.fail() || n < 0 || n > 5)
			{
				cin.clear();
				cin.ignore(INT_MAX, '\n');
				SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
				cout << "//////////////////////////////////////////////////////////" << endl;
				cout << "ÊäÈë´íÎó£¡ÇëÖØÐÂÊäÈë" << endl;
			}
			else break;
		}
		system("cls");
		
		switch (n)
		{
		case 0:
		{
			enemy->isAlive = false;
			SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
			cout << "ÌÓÅÜ³É¹¦£¡" << endl;
			system("pause");
			break;
		}
		break;
		case 1:
		{
			if (this->Speed >= enemy->Speed)
			{
				M_Attack(enemy);
				if (enemy->isAlive)
				{
					M_Attacked(enemy);
					system("pause");
					break;
				}
				else
				{
					system("pause");
					break;
				}
			}
			else
			{
				M_Attacked(enemy);
				if (this->isAlive)
				{
					M_Attack(enemy);
					system("pause");
					break;
				}
				else
				{
					MonsterBag* bag = MonsterBag::Getinstance();
					if(bag->Find()!=nullptr)
					{
						bag->Find()->Fight(enemy);//×Ô¶¯ÇÐ»»±³°üÀïÏÂÒ»Ö»»î×ÅµÄ±¦¿ÉÃÎ½øÐÐÕ½¶·
					}
					else
					{
						SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
						cout << "±³°üÖÐÃ»ÓÐ¿ÉÕ½¶·µÄ±¦¿ÉÃÎ£¡Õ½¶·½áÊø£¡" << endl;
					}
					system("pause");
					break;
				}
			}
		}
		case 2:
		{
			SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
			M_Denfense();
			M_Attacked(enemy);
			system("pause");
			break;
		}
		case 3:
		{
			UsePotion();
			turn--;
			break;
		}
		case 4:
		{
			UseBall(enemy);
			turn--;
			break;
		}
		case 5:
			int n;
			MonsterBag* bag = MonsterBag::Getinstance();
			int size = bag->MonsterNum();
			bag->showMonster();
			cout << "ÇëÊäÈëÏëÑ¡ÔñµÄ±¦¿ÉÃÎ£º" << endl;
			while (true)
			{
				cout << ":";
				cin >> n;
				if (cin.fail() || n < 1 || n > size+1)
				{
					cin.clear();
					cin.ignore(INT_MAX, '\n');
					SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
					cout << "//////////////////////////////////////////////////////////" << endl;
					cout << "ÊäÈë´íÎó£¡ÇëÖØÐÂÊäÈë" << endl;
				}
				else break;
			}
			bag->Return(n-1)->Fight(enemy);
		}
		turn++;
		if (this->defense_up_turn > 0)
		{
			if (this->defense_up_turn == 1)
			{
				SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
				cout << this->Mname << "µÄ·ÀÓùÁ¦ÌáÉý×´Ì¬ÏûÊ§£¡·ÀÓùÁ¦»Ö¸´" << endl;
				this->Defense /= 2;
			}
			defense_up_turn -= 1;
		}
	}
}

void Monster::GainCoin(Monster* enemy)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	Bag* bp = Bag::Getinstance();
	int money = enemy->CURLevel() * 5;
	bp->editGoodNum(7, money);
	SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
	cout << "»ñµÃÁË" << money << "¸ö´ú±Ò" << endl;
}

void Monster::UsePotion()
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	Bag* bp = Bag::Getinstance();
	SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
	cout << "//////////////////////////////////////////////////////////" << endl;
	cout << "ÄãµÄ±³°üÖÐÓÐ" << bp->showGoodNum(4) << "Æ¿ÖÎÁÆÒ©Ë®£¬ÊÇ·ñÒª¶Ô" << this->Mname << " (" << this->MaxValue << " / " << this->CurValue << ") Ê¹ÓÃ£¿" << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
	cout << "ÇëÑ¡ÔñÄãµÄ²Ù×÷£º" << endl;
	cout << "1. Ê¹ÓÃ" << endl;
	cout << "2. ·µ»Ø" << endl;
	int choice;
	while (true)
	{
		cout << ":";
		cin >> choice;
		if (cin.fail() || choice < 1 || choice>2)
		{
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
			cout << "ÊäÈëÁË´íÎóµÄÐòºÅ£¬ÇëÖØÐÂÊäÈë" << endl;
		}
		else break;
	}
	switch (choice)
	{
	case 1:
	{
		if (bp->showGoodNum(4) <= 0)
		{
			SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
			cout << "Ê¹ÓÃÊ§°Ü£¡Ê£ÓàÖÎÁÆÒ©Ë®²»×ã£¡" << endl;
			system("pause");
			break;
		}
		else
		{
			bp->editGoodNum(4, -1);
			this->CurValue += this->MaxValue / 5;
			if (this->CurValue > this->MaxValue)
			{
				this->CurValue = this->MaxValue;
			}
			SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
			cout << "Ê¹ÓÃ³É¹¦£¬µ±Ç°" << this->Mname << "µÄÑªÁ¿Îª£º" << this->MaxValue << " / " << this->CurValue;
			system("pause");
			break;
		}
	}
	case 2:
		break;
	default:
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << "²Ù×÷Ê§°Ü£¬ÇëÊäÈëÕýÈ·Êý×Ö£¡" << endl;
		this->UsePotion();
		system("pause");
		break;
	}
}

void Monster::UseBall(Monster* enemy)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	Bag* bp = Bag::Getinstance();
	SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
	cout << "//////////////////////////////////////////////////////////" << endl;
	cout << "ÄãµÄ±³°üÖÐÓÐ£º\n" << bp->showGoodNum(5) << " ¸öÆÕÍ¨¾«ÁéÇò" << endl;
	cout << bp->showGoodNum(6) << " ¸ö´óÊ¦¾«ÁéÇò" << endl;
	SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN);
	cout << "ÇëÑ¡ÔñÄãµÄ²Ù×÷£º" << endl;
	cout << "1. Ê¹ÓÃÆÕÍ¨¾«ÁéÇò" << endl;
	cout << "2. Ê¹ÓÃ´óÊ¦¾«ÁéÇò" << endl;
	cout << "3. ·µ»Ø" << endl;
	int choice;
	while (true)
	{
		cout << ":";
		cin >> choice;
		if (cin.fail() || choice < 1 || choice>3)
		{
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
			cout << "ÊäÈëÁË´íÎóµÄÐòºÅ£¬ÇëÖØÐÂÊäÈë" << endl;
		}
		else break;
	}
	switch (choice)
	{
	case 1:
	{
		if (bp->showGoodNum(5) <= 0)
		{
			SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
			cout << "Ê¹ÓÃÊ§°Ü£¡Ê£ÓàÆÕÍ¨¾«ÁéÇò²»×ã£¡" << endl;
			system("pause");
			break;
		}
		else
		{
			bp->editGoodNum(5, -1);
			float possible = ((float)enemy->MaxValue - (float)enemy->CurValue) / (float)enemy->MaxValue * 100;
			int n = rand() % 100;
			if (n <= possible)
			{
				MonsterBag::Getinstance()->Add(*enemy);
				enemy->isAlive = false;
			}
			else
			{
				SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
				cout << "²¶×½Ê§°Ü£¡" << endl;
			}
			system("pause");
			break;
		}
		break;
	}
	case 2:
	{
		if (bp->showGoodNum(6) <= 0)
		{
			SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
			cout << "Ê¹ÓÃÊ§°Ü£¡Ê£Óà´óÊ¦¾«ÁéÇò²»×ã£¡" << endl;
			system("pause");
			break;
		}
		else
		{
			bp->editGoodNum(6, -1);
			float possible = ((float)enemy->MaxValue - (float)enemy->CurValue) / (float)enemy->MaxValue * 100 * 2;
			int n = rand() % 100;
			if (n <= possible)
			{
				MonsterBag::Getinstance()->Add(*enemy);
				enemy->isAlive = false;
			}
			else
			{
				SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
				cout << "²¶×½Ê§°Ü£¡" << endl;
			}
			system("pause");
			break;
		}
		break;
	}
	case 3:
	{
		break;
	}
	default:
	{
		SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
		cout << "²Ù×÷Ê§°Ü£¡ÇëÊäÈëÕýÈ·Êý×Ö£¡" << endl;
		this->UseBall(enemy);
		break;
	}
	}

}

void Monster::M_Attack(Monster* enemy)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole,FOREGROUND_BLUE);
	int damage;
	damage = this->Attack - enemy->Defense;
	int check = this->Check(*enemy);//ÅÐ¶ÏÊôÐÔÓÅÁÓÊÆ
	if (damage <= 0)//¶ÔµÐÈËÔì³ÉÉËº¦
	{
		cout << this->Mname << "¶Ô" << enemy->Mname << "·¢ÆðÁË¹¥»÷£¬µ«Ã»ÄÜ»÷ÆÆ" << enemy->Mname << "µÄ·ÀÓù£¬Ôì³ÉÁË 0 µãÉËº¦" << endl;
	}
	else {
		switch (check)
		{
		case 0:
		{
			cout << this->Mname << "¶Ô" << enemy->Mname << "·¢ÆðÁË¹¥»÷£¬µ«Ð§¹ûÎ¢Èõ¡£Ôì³ÉÁË " << damage / 2 << " µãÉËº¦" << endl;
			enemy->CurValue -= damage / 2;
			break;
		}
		case 1:
		{
			cout << this->Mname << "¶Ô" << enemy->Mname << "·¢ÆðÁË¹¥»÷¡£Ôì³ÉÁË " << damage << " µãÉËº¦" << endl;
			enemy->CurValue -= damage;
			break;
		}
		case 2:
		{
			cout << this->Mname << "¶Ô" << enemy->Mname << "·¢ÆðÁË¹¥»÷£¬Ð§¹ûÏÔÖø£¡Ôì³ÉÁË " << damage * 2 << " µãÉËº¦" << endl;
			enemy->CurValue -= damage * 2;
			break;
		}
		}
	}
	if (enemy->CurValue <= 0)
	{
		enemy->isAlive = false;
		SetConsoleTextAttribute(hConsole, FOREGROUND_RED);
		cout << enemy->Mname << "ÌåÁ¦²»Ö§£¬µ¹ÏÂÁË!" << endl;
		this->GainCoin(enemy);
		this->Exppp(enemy->Experience);
	}
	//·µ»Ø³¡¾°***************************************************************************

}

void Monster::Exppp(int exp)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	this->CurExper += exp;
	int improve = 0;
	while (this->CurExper >= this->MaxExper)
	{
		this->CurExper -= this->MaxExper;

		this->CurLevel += 1;
		this->MaxExper += 20;
		this->MaxValue += 5;
		this->Attack += 2;
		this->Defense += 2;
		this->Speed += 1;

		improve++;
		//Éý¼¶ÒÔºó¸÷ÏîÊôÐÔÔö¼Ó
		this->CurValue = MaxValue;
		//Éý¼¶ÒÔºó»Ö¸´×´Ì¬
	}
	if (improve > 0)
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
		cout << this->Mname << "Éýµ½ÁË" << this->CurLevel << "¼¶£¡¸÷ÏîÊôÐÔ»ñµÃÁËÌáÉý" << endl;
		cout << this->Mname << "µ±Ç°µÄÊôÐÔÎª£º" << endl;
		this->Show_Detail();
	}
	else
	{
		SetConsoleTextAttribute(hConsole, FOREGROUND_BLUE | FOREGROUND_GREEN);
		cout << this->Mname << "»ñµÃÁË" << exp << "µã¾­Ñé£¬µ±Ç°¾­Ñé" << this->CurExper << " / " << this->MaxExper << endl;
	}
}

void Monster::M_Attacked(Monster* enemy)
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole,FOREGROUND_BLUE);
	int damage;
	damage = enemy->Attack - this->Defense;
	int check = this->Check(*enemy);//ÅÐ¶ÏÊôÐÔÓÅÁÓÊÆ
	if (damage <= 0)//ÊÕµ½µÐÈËÉËº¦
	{
		cout << enemy->Mname << "¶Ô" << this->Mname << "·¢ÆðÁË¹¥»÷£¬µ«Ã»ÄÜ»÷ÆÆ" << this->Mname << "µÄ·ÀÓù£¬Ôì³ÉÁË 0 µãÉËº¦" << endl;
	}
	else {
		switch (check)
		{
		case 0:
		{
			cout << enemy->Mname << "¶Ô" << this->Mname << "·¢ÆðÁË¹¥»÷£¬Ð§¹ûÏÔÖø£¡Ôì³ÉÁË " << damage * 2 << " µãÉËº¦" << endl;
			this->CurValue -= damage * 2;
			break;
		}
		case 1:
		{
			cout << enemy->Mname << "¶Ô" << this->Mname << "·¢ÆðÁË¹¥»÷¡£Ôì³ÉÁË " << damage << " µãÉËº¦" << endl;
			this->CurValue -= damage;
			break;
		}
		case 2:
		{
			cout << enemy->Mname << "¶Ô" << this->Mname << "·¢ÆðÁË¹¥»÷£¬µ«Ð§¹ûÎ¢Èõ¡£Ôì³ÉÁË " << damage / 2 << " µãÉËº¦" << endl;
			this->CurValue -= damage / 2;
			break;
		}
		}
	}
	if (this->CurValue <= 0)
	{
		this->CurValue = 0;
		this->isAlive = false;
		SetConsoleTextAttribute(hConsole,FOREGROUND_RED);
		cout << this->Mname << "ÌåÁ¦²»Ö§£¬µ¹ÏÂÁË!" << endl;
		/*MonsterBag* bag = MonsterBag::Getinstance();
		bag->Find()->Fight(enemy);*/
	}

}

void Monster::M_Denfense()
{
	cout << this->Mname << "½øÐÐÁË·ÀÓù£¬·ÀÓùÁ¦ÌáÉýÁ½»ØºÏ£¡" << endl;
	this->Defense += this->Defense;
	this->defense_up_turn += 2;
}

void Monster::Caught()
{
	this->hasCaught = true;
}

bool Monster::HasCaught()
{
	return this->hasCaught;
}

int Monster::Check(Monster enemy)
{
	switch (this->Mnature)
	{
	case 0://Ò»°ãÊôÐÔÊ±£¬¶ÔÒ»°ãÊôÐÔÁÓÊÆ£¬¶ÔÆäËûÊôÐÔÕý³£
	{
		if (enemy.Mnature == 0)
		{
			return 0;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 1://»ðÊôÐÔÊ±£¬¶Ô»ð¡¢Ë®¡¢ÑÒÊ¯ÊôÐÔÁÓÊÆ£¬¶Ô²Ý¡¢±ù¡¢³æÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 1 || enemy.Mnature == 2 || enemy.Mnature == 9)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 4 || enemy.Mnature == 5 || enemy.Mnature == 8)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 2://Ë®ÊôÐÔÊ±£¬¶ÔË®¡¢²ÝÊôÐÔÁÓÊÆ£¬¶Ô»ð¡¢ÑÒÊ¯ÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 2 || enemy.Mnature == 4)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 1 || enemy.Mnature == 9)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 3://µçÊôÐÔÊ±£¬¶Ôµç¡¢²ÝÊôÐÔÁÓÊÆ£¬¶ÔË®¡¢·ÉÐÐÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 3 || enemy.Mnature == 4)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 2 || enemy.Mnature == 6)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 4://²ÝÊôÐÔÊ±,¶Ô»ð¡¢²Ý¡¢¶¾¡¢·ÉÐÐ¡¢³æÊôÐÔÁÓÊÆ£¬¶ÔË®¡¢ÑÒÊ¯ÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 1 || enemy.Mnature == 4 || enemy.Mnature == 6 || enemy.Mnature == 7 || enemy.Mnature == 8)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 2 || enemy.Mnature == 9)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 5://±ùÊôÐÔÊ±£¬¶Ô»ð¡¢Ë®¡¢±ùÊôÐÔÁÓÊÆ£¬¶Ô²Ý¡¢·ÉÐÐÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 1 || enemy.Mnature == 2 || enemy.Mnature == 5)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 4 || enemy.Mnature == 6)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 6://·ÉÐÐÊôÐÔÊ±£¬¶Ôµç¡¢ÑÒÊ¯ÊôÐÔÁÓÊÆ£¬¶Ô²Ý¡¢³æÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 3 || enemy.Mnature == 9)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 4 || enemy.Mnature == 8)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 7://¶¾ÊôÐÔÊ±£¬¶Ô¶¾¡¢ÑÒÊ¯ÊôÐÔÁÓÊÆ,¶Ô²ÝÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 7 || enemy.Mnature == 9)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 4)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 8://³æÊôÐÔÊ±£¬¶Ô»ð¡¢¶¾¡¢·ÉÐÐÊôÐÔÁÓÊÆ£¬¶Ô²ÝÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 1 || enemy.Mnature == 6 || enemy.Mnature == 7)
		{
			return 0;
			break;
		}
		else if (enemy.Mnature == 4)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	case 9://ÑÒÊ¯ÊôÐÔÊ±£¬¶Ô»ð¡¢±ù¡¢·ÉÐÐ¡¢³æÊôÐÔÓÅÊÆ£¬¶ÔÆäËûÕý³£
	{
		if (enemy.Mnature == 1 || enemy.Mnature == 5 || enemy.Mnature == 6 || enemy.Mnature == 8)
		{
			return 2;
			break;
		}
		else
		{
			return 1;
			break;
		}
	}
	}
}

bool Monster::IsAlive()
{
	return isAlive;
}

string Monster::Show_Name()
{
	return this->Mname;
}

int Monster::Id()
{
	return id;
}

int Monster::CURValue()
{
	return CurValue;
}

int Monster::CURLevel()
{
	return CurLevel;
}

int Monster::CURExper()
{
	return CurExper;
}

void Monster::Show_Detail()
{
	HANDLE hConsole;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole,FOREGROUND_BLUE | FOREGROUND_GREEN);
	cout << "//////////////////////////////////////////////////////////" << endl;
	cout << "Ãû³Æ£º" << this->Mname << endl;
	cout << "ÊôÐÔ:";
	switch (this->Mnature)
	{
	case 0:
	{
		cout << "Ò»°ã" << endl;
		break;
	}
	case 1:
	{
		cout << "»ð" << endl;
		break;
	}
	case 2:
	{
		cout << "Ë®" << endl;
		break;
	}
	case 3:
	{
		cout << "µç" << endl;
		break;
	}
	case 4:
	{
		cout << "²Ý" << endl;
		break;
	}
	case 5:
	{
		cout << "±ù" << endl;
		break;
	}
	case 6:
	{
		cout << "·ÉÐÐ" << endl;
		break;
	}
	case 7:
	{
		cout << "¶¾" << endl;
		break;
	}
	case 8:
	{
		cout << "³æ" << endl;
		break;
	}
	case 9:
	{
		cout << "ÑÒÊ¯" << endl;
		break;
	}
		break;
	}
	cout << endl;
	cout << "HP£º" << this->CurValue << " / " << this->MaxValue << endl;
	cout << "¹¥»÷Á¦£º" << this->Attack << endl;
	cout << "·ÀÓùÁ¦£º" << this->Defense << endl;
	cout << "ËÙ¶È£º" << this->Speed << endl;
	cout << endl;
	cout << "µÈ¼¶£º" << this->CurLevel << " / 80" << endl;
	cout << "¾­Ñé£º" << this->CurExper << " / " << this->MaxExper << endl;
}